from pentestgpt.prompts.prompt_class import PentestGPTPrompt
from pentestgpt.utils.task_handler import (
    main_task_entry,
    mainTaskCompleter,
)
from pentestgpt.utils.main_menu import (
    next_task_input,
    more,
    todo,
    discuss,
    google,
    quit_session,
    postfix_options,
    options_desc
)
from pentestgpt.utils.console import console
from pentestgpt.utils.prompt_select import prompt_ask, prompt_select
from pentestgpt.code.parsing import PARSING_CHAR_WINDOW, ParsingModule

from prompt_toolkit.formatted_text import HTML

class ReasoningModule:
    postfix_options = {
    "tool": "The input content is from a security testing tool. You need to list down all the points that are interesting to you; you should summarize it as if you are reporting to a senior penetration tester for further guidance.\n",
    "user-comments": "The input content is from user comments.\n",
    "web": "The input content is from web pages. You need to summarize the readable-contents, and list down all the points that can be interesting for penetration testing.\n",
    "default": "The user did not specify the input source. You need to summarize based on the contents.\n",
    }

    options_desc = {
        "tool": " Paste the output of the security test tool used",
        "user-comments": "",
        "web": " Paste the relevant content of a web page",
        "deafult": " Write whatever you want, the tool will handle it",
    }
    def __init__(
        self,
        reasoning_model="gpt-4-1106-preview",
        ):
        self.reasoning_model = reasoning_model
        self.test_reasoning_session_id = None
        self.step_reasoning = (
            None  # the response from the reasoning session for the current step
        )
        self.prompts = PentestGPTPrompt()
        self.chat_count = 0

    def reasoning_handler(self, text) -> str:
        # summarize the contents if necessary.
        if len(text) > PARSING_CHAR_WINDOW:
            text = ParsingModule().input_parsing_handler(text) #TODO: test this
        # PentestGPT Reasoning Logic
        ## 1. Given the information, update the PTT
        _updated_ptt_response = self.reasoning_model.send_message(
            self.prompts.process_results + text, self.test_reasoning_session_id
        )
        ## 2. Validate if the PTT is correct
        #TODO: validate the PTT
        ## 3. If the PTT is correct, select all the to-dos
        _task_selection_response = self.reasoning_model.send_message(
            self.prompts.process_results_task_selection, self.test_reasoning_session_id
        )
        # get the complete output:
        response = _updated_ptt_response + _task_selection_response

        # self.log_conversation("reasoning", response) #TODO: Fix logging
        return response

    def next_task(self):
        options = list(postfix_options.keys())
        opt_desc = list(options_desc.values())
        source, user_input = next_task_input() # Get user input
        with console.status("[bold green] PentestGPT Thinking...") as status:
                source, parsed_input = ParsingModule().input_parsing_handler( #TODO: test this
                    user_input, source=options[int(source)]
                )
        ## (2) pass the summarized information to the reasoning session.
        reasoning_response = self.reasoning_handler(parsed_input)
        ## (3) print the results
        console.print(
            "Based on the analysis, the following tasks are recommended:",
            style="bold green",
        )
        console.print(reasoning_response + "\n")
        # self.log_conversation( #TODO: fix logging
        #     "pentestGPT",
        #     "Based on the analysis, the following tasks are recommended:"
        #     + reasoning_response,
        # )
        return reasoning_response

    def get_user_input(self):
        options = list(postfix_options.keys())
        opt_desc = list(options_desc.values())

        value_list = [
            (
                i,
                HTML(
                    f'<style fg="cyan">{options[i]}</style><style fg="LightSeaGreen">{opt_desc[i]}</style>'
                ),
            )
            for i in range(len(options))
        ]
        source = prompt_select( # Source of the input given (tool, user-comments, web, default)
            title="Please choose the source of the information.", values=value_list
        )
        console.print(
            "Your input: (End with <shift + right-arrow>)", style="bold green"
        )
        user_input = prompt_ask("> ", multiline=True)
        # log_conversation( #TODO: fix logging
        #     "user", f"Source: {options[int(source)]}" + "\n" + user_input
        # )
        return (source, user_input)