class generation_module:

    def __init__(
            self,
            generation_model="gpt-4-1106-preview",
            input_generation_session_id=None
        ):
        self.generation_model = generation_model
        self.input_generation_session_id = input_generation_session_id
        self.test_generation_session_id = None

    def test_generation_handler(self, text): #TODO: move to generation class
        # send the contents to chatGPT test_generation_session and obtain the results
        response = self.generation_model.send_message(
            text, self.test_generation_session_id
        )
        # log the conversation
        # self.log_conversation("generation", response) #TODO: Fix logging
        return response


    def local_input_handler(self) -> str: #TODO: move to generation class
        """
        Request for user's input to handle the local task
        """
        local_task_response = ""
        self.chat_count += 1
        local_request_option = local_task_entry()
        # self.log_conversation("user", local_request_option) #TODO: fix logging

        if local_request_option == "help":
            print(localTaskCompleter().task_details)

        elif local_request_option == "discuss":
            ## (1) Request for user multi-line input
            self.console.print(
                "Please share your findings and questions with PentestGPT."
            )
            # self.log_conversation( #TODO: fix logging
            #     "pentestGPT",
            #     "Please share your findings and questions with PentestGPT. (End with <shift + right-arrow>)",
            # )
            user_input = prompt_ask("Your input: ", multiline=True)
            # self.log_conversation("user", user_input) #TODO: fix logging
            ## (2) pass the information to the reasoning session.
            with self.console.status("[bold green] PentestGPT Thinking...") as status:
                local_task_response = self.test_generation_handler(
                    self.prompts.local_task_prefix + user_input
                )
            ## (3) print the results
            self.console.print("PentestGPT:\n", style="bold green")
            self.console.print(local_task_response + "\n", style="yellow")
            self.log_conversation("pentestGPT", local_task_response) #TODO: fix logging

        elif local_request_option == "brainstorm":
            ## (1) Request for user multi-line input
            self.console.print(
                "Please share your concerns and questions with PentestGPT."
            )
            # self.log_conversation( #TODO: fix logging
            #     "pentestGPT",
            #     "Please share your concerns and questions with PentestGPT. End with <shift + right-arrow>)",
            # )
            user_input = prompt_ask("Your input: ", multiline=True)
            # self.log_conversation("user", user_input) #TODO: fix logging
            ## (2) pass the information to the reasoning session.
            with self.console.status("[bold green] PentestGPT Thinking...") as status:
                local_task_response = self.test_generation_handler(
                    self.prompts.local_task_brainstorm + user_input
                )
            ## (3) print the results
            self.console.print("PentestGPT:\n", style="bold green")
            self.console.print(local_task_response + "\n", style="yellow")
            # self.log_conversation("pentestGPT", local_task_response) #TODO: fix logging

        elif local_request_option == "google":
            # get the users input
            self.console.print(
                "Please enter your search query. PentestGPT will summarize the info from google. (End with <shift + right-arrow>) ",
                style="bold green",
            )
            # self.log_conversation( #TODO: fix logging
            #     "pentestGPT",
            #     "Please enter your search query. PentestGPT will summarize the info from google.",
            # )
            user_input = prompt_ask("Your input: ", multiline=False)
            # self.log_conversation("user", user_input) #TODO: fix logging
            with self.console.status("[bold green] PentestGPT Thinking...") as status:
                # query the question
                result: dict = google_search(user_input, 5)  # 5 results by default
                # summarize the results
                # TODO
                local_task_response = (
                    "Google search results:\n" + "still under development."
                )
            self.console.print(local_task_response + "\n", style="yellow")
            # self.log_conversation("pentestGPT", local_task_response) #TODO: fix logging
            return local_task_response

        elif local_request_option == "continue":
            self.console.print("Exit the local task and continue the main task.")
            # self.log_conversation(
            #     "pentestGPT", "Exit the local task and continue the main task."
            # ) #TODO: fix logging
            local_task_response = "continue"

        return local_task_response