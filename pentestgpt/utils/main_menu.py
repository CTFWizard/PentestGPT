"""Helper functions for the main menu

Main menu optons:
----------------


"""
from pentestgpt.utils.prompt_select import prompt_select, prompt_ask
from pentestgpt.utils.console import console
from prompt_toolkit.formatted_text import HTML

postfix_options = {
    "tool": "The input content is from a security testing tool. You need to list down all the points that are interesting to you; you should summarize it as if you are reporting to a senior penetration tester for further guidance.\n",
    "user-comments": "The input content is from user comments.\n",
    "web": "The input content is from web pages. You need to summarize the readable-contents, and list down all the points that can be interesting for penetration testing.\n",
    "default": "The user did not specify the input source. You need to summarize based on the contents.\n",
}

options_desc = {
    "tool": " Paste the output of the security test tool used",
    "user-comments": "",
    "web": " Paste the relevant content of a web page",
    "deafult": " Write whatever you want, the tool will handle it",
}

def next_task_input():
    options = list(postfix_options.keys())
    opt_desc = list(options_desc.values())

    value_list = [
        (
            i,
            HTML(
                f'<style fg="cyan">{options[i]}</style><style fg="LightSeaGreen">{opt_desc[i]}</style>'
            ),
        )
        for i in range(len(options))
    ]
    source = prompt_select( # Source of the input given (tool, user-comments, web, default)
        title="Please choose the source of the information.", values=value_list
    )
    console.print(
        "Your input: (End with <shift + right-arrow>)", style="bold green"
    )
    user_input = prompt_ask("> ", multiline=True)
    # log_conversation( #TODO: fix logging
    #     "user", f"Source: {options[int(source)]}" + "\n" + user_input
    # )
    return (source, user_input)

def more():
        # self.log_conversation("user", "more") #TODO: fix logging
        ## (1) check if reasoning session is initialized
        if not hasattr(self, "step_reasoning_response"):
            console.print(
                "You have not initialized the task yet. Please perform the basic testing following `next` option.",
                style="bold red",
            )
            response = "You have not initialized the task yet. Please perform the basic testing following `next` option."
            self.log_conversation("pentestGPT", response)
            return response
        ## (2) start local task generation.
        ### (2.1) ask the reasoning session to analyze the current situation, and explain the task
        console.print(
            "PentestGPT will generate more test details, and enter the sub-task generation mode. (Pressing Enter to continue)",
            style="bold green",
        )
        # self.log_conversation( #TODO: fix logging
        #     "pentestGPT",
        #     "PentestGPT will generate more test details, and enter the sub-task generation mode.",
        # )
        input()

        ### (2.2) pass the sub-tasks to the test generation session
        with console.status("[bold green] PentestGPT Thinking...") as status:
            generation_response = self.test_generation_handler(
                self.step_reasoning_response
            )
            _local_init_response = self.test_generation_handler(
                self.prompts.local_task_init
            )

        console.print(
            "Below are the further details.",
            style="bold green",
        )
        console.print(generation_response + "\n")
        response = generation_response
        # self.log_conversation("pentestGPT", response) # TODO: fix logging

        ### (2.3) local task handler
        while True:
            local_task_response = self.local_input_handler()
            if local_task_response == "continue":
                # break the local task handler
                break
def todo():
        ## log that user is asking for todo list
        # self.log_conversation("user", "todo") #TODO: fix logging
        ## (1) ask the reasoning session to analyze the current situation, and list the top sub-tasks
        with console.status("[bold green] PentestGPT Thinking...") as status:
            reasoning_response = self.reasoning_handler(self.prompts.ask_todo)
            ## (2) pass the sub-tasks to the test_generation session.
            message = self.prompts.todo_to_command + "\n" + reasoning_response
            generation_response = self.test_generation_handler(message)
            ## (3) print the results
        console.print(
            "Based on the analysis, the following tasks are recommended:",
            style="bold green",
        )
        console.print(reasoning_response + "\n")
        console.print(
            "You can follow the instructions below to complete the tasks.",
            style="bold green",
        )
        console.print(generation_response + "\n")
        response = reasoning_response
        # self.log_conversation( #TODO: fix logging
        #     "pentestGPT",
        #     (
        #         (
        #             (
        #                 (
        #                     "Based on the analysis, the following tasks are recommended:"
        #                     + response
        #                 )
        #                 + "\n"
        #             )
        #             + "You can follow the instructions below to complete the tasks."
        #         )
        #         + generation_response
        #     ),
        # )
def discuss():
     pass

def google():
     pass

def quit_session():
     pass
